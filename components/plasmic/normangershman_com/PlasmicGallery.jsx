// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7TgNrWQj5NP1iabd7btsp3
// Component: hDT3vhvd4K
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_normangershman_com.module.css"; // plasmic-import: 7TgNrWQj5NP1iabd7btsp3/projectcss
import sty from "./PlasmicGallery.module.css"; // plasmic-import: hDT3vhvd4K/css

export const PlasmicGallery__VariantProps = new Array();

export const PlasmicGallery__ArgProps = new Array();

function PlasmicGallery__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Gallery Top"}
      </div>

      <Slider
        data-plasmic-name={"slider"}
        data-plasmic-override={overrides.slider}
        className={classNames("__wab_instance", sty.slider)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__b7NhW)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={{
            src: "/plasmic/normangershman_com/images/shoe2.png",
            fullWidth: 864,
            fullHeight: 1080,
            aspectRatio: undefined
          }}
        />

        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__mn4W8)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={{
            src: "/plasmic/normangershman_com/images/shoe4.png",
            fullWidth: 1024,
            fullHeight: 768,
            aspectRatio: undefined
          }}
        />

        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__x2Gef)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={{
            src: "/plasmic/normangershman_com/images/shoe7.png",
            fullWidth: 840,
            fullHeight: 840,
            aspectRatio: undefined
          }}
        />
      </Slider>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "slider"],
  text: ["text"],
  slider: ["slider"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGallery__ArgProps,
      internalVariantPropNames: PlasmicGallery__VariantProps
    });

    return PlasmicGallery__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGallery";
  } else {
    func.displayName = `PlasmicGallery.${nodeName}`;
  }
  return func;
}

export const PlasmicGallery = Object.assign(
  // Top-level PlasmicGallery renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    slider: makeNodeComponent("slider"),
    // Metadata about props expected for PlasmicGallery
    internalVariantProps: PlasmicGallery__VariantProps,
    internalArgProps: PlasmicGallery__ArgProps
  }
);

export default PlasmicGallery;
/* prettier-ignore-end */
